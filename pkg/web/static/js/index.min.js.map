{"mappings":"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","sources":["<anon>","pkg/web/static/js/index.js","pkg/web/static/js/toggle-filtered.js"],"sourcesContent":["var $9LPjv$hotwiredturbo = require(\"@hotwired/turbo\");\nvar $9LPjv$reconnectingwebsocket = require(\"reconnecting-websocket\");\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n\nfunction $bf16de0c70dd5529$export$da400225cd509f48() {\n    const toggleButton = document.getElementById(\"toggle-filtered-alerts\");\n    const filteredTable = document.getElementById(\"filtered-table\");\n    toggleButton.addEventListener(\"click\", ()=>{\n        filteredTable.classList.toggle(\"hidden\");\n        const filteredAreShown = !filteredTable.classList.contains(\"hidden\");\n        toggleButton.innerText = filteredAreShown ? \"Hide\" : \"Show\";\n        localStorage.setItem(\"filteredAreShown\", filteredAreShown.toString());\n        if (filteredAreShown) filteredTable.scrollIntoView();\n    });\n    function reRegisterToggleFilteredStatus(event) {\n        const fallbackToDefaultActions = event.detail.render;\n        event.detail.render = function(streamElement) {\n            fallbackToDefaultActions(streamElement);\n            $bf16de0c70dd5529$export$da400225cd509f48();\n        };\n    }\n    document.addEventListener(\"turbo:before-stream-render\", reRegisterToggleFilteredStatus);\n    if (localStorage.getItem(\"filteredAreShown\") === \"true\") {\n        filteredTable.classList.remove(\"hidden\");\n        toggleButton.innerText = \"Show\";\n    }\n}\n\n\n(0, $bf16de0c70dd5529$export$da400225cd509f48)();\nclass $f4e3c085340bbf20$var$SSEConn {\n    constructor(socketUrl){\n        this.socketUrl = socketUrl;\n    }\n    connect() {\n        this.socket = new EventSource(this.socketUrl);\n    }\n    disconnect() {\n        this.active = false;\n        if (this.socket) {\n            $9LPjv$hotwiredturbo.disconnectStreamSource(this.socket);\n            this.socket.close();\n            this.socket = null;\n        }\n    }\n    reconnect() {\n        if (!this.socket) this.connect();\n    }\n}\nclass $f4e3c085340bbf20$var$WebSocketConn {\n    constructor(socketUrl){\n        this.socketUrl = socketUrl;\n    }\n    connect() {\n        let socket = new (0, ($parcel$interopDefault($9LPjv$reconnectingwebsocket)))(this.socketUrl);\n        socket.addEventListener(\"error\", function(ev) {\n            console.error(\"Socket encountered error: \", ev.message, \"Closing socket\");\n        });\n        socket.addEventListener(\"open\", function() {\n            console.log(\"Socket is connected.  Enabling turbo.\");\n            $9LPjv$hotwiredturbo.connectStreamSource(socket);\n        });\n        this.socket = socket;\n    }\n    disconnect() {\n        if (this.socket) {\n            $9LPjv$hotwiredturbo.disconnectStreamSource(this.socket);\n            this.socket.close(3001, \"Human disconnect\");\n            this.socket = null;\n        }\n    }\n    reconnect() {\n        if (!this.socket) this.connect();\n    }\n}\nclass $f4e3c085340bbf20$var$FallbackConn {\n    constructor(){\n        this.active = true;\n    }\n    connect() {\n        let conn = this;\n        this.timerId = setTimeout(function reload() {\n            if (conn.active) {\n                let lastRefresh = Date.parse(document.querySelector(\"#last_refresh\").dateTime);\n                if (Date.now() - lastRefresh > 90000) {\n                    console.log(\"Force reloading, last refresh too old: \" + (Date.now() - lastRefresh));\n                    location.reload();\n                } else if (Date.now() - lastRefresh > 70000) {\n                    console.log(\"Reloading, last refresh too old: \" + (Date.now() - lastRefresh));\n                    location.reload(); // TODO: make a request to get a partial\n                }\n                conn.timerId = setTimeout(reload, 10000);\n            }\n        }, 10000);\n    }\n    disconnect() {\n        this.active = false;\n        clearTimeout(this.timerId);\n    }\n    reconnect() {\n        this.active = true;\n        this.connect();\n    }\n}\nlet $f4e3c085340bbf20$var$eventSource = new URLSearchParams(window.location.search).get(\"eventSource\");\nif ($f4e3c085340bbf20$var$eventSource == null) {\n    if (window[\"WebSocket\"]) $f4e3c085340bbf20$var$eventSource = \"websocket\";\n    else if (window[\"EventSource\"]) $f4e3c085340bbf20$var$eventSource = \"sse\";\n}\nlet $f4e3c085340bbf20$var$fallback = new $f4e3c085340bbf20$var$FallbackConn();\nlet $f4e3c085340bbf20$var$conn = null;\nswitch($f4e3c085340bbf20$var$eventSource){\n    case \"websocket\":\n        {\n            const protocol = window.location.protocol === \"https:\" ? \"wss://\" : \"ws://\";\n            const dashboard = window.location.pathname;\n            const wsUrl = protocol + window.location.host + \"/ws\" + dashboard;\n            $f4e3c085340bbf20$var$conn = new $f4e3c085340bbf20$var$WebSocketConn(wsUrl);\n            break;\n        }\n    case \"sse\":\n        {\n            const protocol = window.location.protocol;\n            const dashboard = window.location.pathname;\n            const sseUrl = protocol + \"//\" + window.location.host + \"/sse\" + dashboard;\n            $f4e3c085340bbf20$var$conn = new $f4e3c085340bbf20$var$SSEConn(sseUrl);\n            break;\n        }\n    default:\n        $f4e3c085340bbf20$var$conn = $f4e3c085340bbf20$var$fallback;\n}\n$f4e3c085340bbf20$var$fallback.connect();\n$f4e3c085340bbf20$var$conn.connect();\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    console.log(\"Adding handler for manual disconnect.\");\n    const csEl = document.getElementById(\"connection-state\");\n    csEl.addEventListener(\"change\", function() {\n        if (this.checked) {\n            console.log(\"Manually connecting stream.\");\n            $f4e3c085340bbf20$var$conn.reconnect();\n            $f4e3c085340bbf20$var$fallback.reconnect();\n        } else {\n            console.log(\"Manually disconnecting stream.\");\n            $f4e3c085340bbf20$var$conn.disconnect();\n            $f4e3c085340bbf20$var$fallback.disconnect();\n        }\n    });\n});\n\n\n//# sourceMappingURL=index.min.js.map\n","import * as Turbo from '@hotwired/turbo';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { toggleFilteredStatus } from \"./toggle-filtered\";\n\ntoggleFilteredStatus();\n\nclass SSEConn {\n    constructor(socketUrl) {\n        this.socketUrl = socketUrl;\n    }\n\n    connect() {\n        this.socket = new EventSource(this.socketUrl);\n    }\n\n    disconnect() {\n        this.active = false;\n        if (this.socket) {\n            Turbo.disconnectStreamSource(this.socket);\n            this.socket.close();\n            this.socket = null;\n        }\n    }\n\n    reconnect() {\n        if (!this.socket) {\n            this.connect();\n        }\n    }\n}\n\nclass WebSocketConn {\n    constructor(socketUrl) {\n        this.socketUrl = socketUrl;\n    }\n\n    connect() {\n        let socket = new ReconnectingWebSocket(this.socketUrl);\n        socket.addEventListener(\"error\", function (ev) {\n            console.error('Socket encountered error: ', ev.message, 'Closing socket');\n        })\n        socket.addEventListener(\"open\", function () {\n            console.log('Socket is connected.  Enabling turbo.');\n            Turbo.connectStreamSource(socket);\n        })\n        this.socket = socket;\n    }\n\n    disconnect() {\n        if (this.socket) {\n            Turbo.disconnectStreamSource(this.socket);\n            this.socket.close(3001, \"Human disconnect\");\n            this.socket = null;\n        }\n    }\n\n    reconnect() {\n        if (!this.socket) {\n            this.connect();\n        }\n    }\n}\n\nclass FallbackConn {\n    constructor() {\n        this.active = true;\n    }\n\n    connect() {\n        let conn = this;\n        this.timerId = setTimeout(function reload() {\n            if (conn.active) {\n                let lastRefresh = Date.parse(document.querySelector(\"#last_refresh\").dateTime);\n                if (Date.now() - lastRefresh > 90000) {\n                    console.log(\"Force reloading, last refresh too old: \" + (Date.now() - lastRefresh))\n                    location.reload();\n                } else if (Date.now() - lastRefresh > 70000) {\n                    console.log(\"Reloading, last refresh too old: \" + (Date.now() - lastRefresh))\n                    location.reload(); // TODO: make a request to get a partial\n                }\n                conn.timerId = setTimeout(reload, 10000);\n            }\n        }, 10000);\n    }\n\n    disconnect() {\n        this.active = false;\n        clearTimeout(this.timerId);\n    }\n\n    reconnect() {\n        this.active = true;\n        this.connect();\n    }\n}\n\nlet eventSource = new URLSearchParams(window.location.search).get(\"eventSource\");\nif (eventSource == null) {\n    if (window[\"WebSocket\"]) {\n        eventSource = \"websocket\";\n    } else if (window[\"EventSource\"]) {\n        eventSource = \"sse\";\n    }\n}\n\nlet fallback = new FallbackConn();\nlet conn = null;\nswitch (eventSource) {\n    case \"websocket\": {\n        const protocol = ((window.location.protocol === \"https:\") ? \"wss://\" : \"ws://\");\n        const dashboard = window.location.pathname;\n        const wsUrl = protocol + window.location.host + \"/ws\" + dashboard;\n        conn = new WebSocketConn(wsUrl);\n        break;\n    }\n    case \"sse\": {\n        const protocol = window.location.protocol;\n        const dashboard = window.location.pathname;\n        const sseUrl = protocol + \"//\" + window.location.host + \"/sse\" + dashboard;\n        conn = new SSEConn(sseUrl);\n        break;\n    }\n    default:\n        conn = fallback;\n}\nfallback.connect();\nconn.connect();\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    console.log('Adding handler for manual disconnect.');\n    const csEl = document.getElementById('connection-state');\n    csEl.addEventListener(\"change\", function () {\n        if (this.checked) {\n            console.log('Manually connecting stream.');\n            conn.reconnect();\n            fallback.reconnect();\n        } else {\n            console.log('Manually disconnecting stream.');\n            conn.disconnect();\n            fallback.disconnect();\n        }\n    });\n});\n","export function toggleFilteredStatus() {\n    const toggleButton = document.getElementById(\"toggle-filtered-alerts\");\n    const filteredTable = document.getElementById(\"filtered-table\");\n\n    toggleButton.addEventListener(\"click\", () => {\n        filteredTable.classList.toggle(\"hidden\");\n        const filteredAreShown = !filteredTable.classList.contains(\"hidden\");\n        toggleButton.innerText = filteredAreShown ? \"Hide\" : \"Show\";\n        localStorage.setItem(\"filteredAreShown\", filteredAreShown.toString());\n        if (filteredAreShown) {\n            filteredTable.scrollIntoView();\n        }\n    });\n\n    function reRegisterToggleFilteredStatus(event) {\n        const fallbackToDefaultActions = event.detail.render\n\n        event.detail.render = function (streamElement) {\n            fallbackToDefaultActions(streamElement)\n            toggleFilteredStatus();\n        }\n    }\n    document.addEventListener(\"turbo:before-stream-render\", reRegisterToggleFilteredStatus);\n\n    if (localStorage.getItem(\"filteredAreShown\") === \"true\") {\n        filteredTable.classList.remove(\"hidden\");\n        toggleButton.innerText = \"Show\";\n    }\n}\n"],"names":["$9LPjv$hotwiredturbo","require","$9LPjv$reconnectingwebsocket","$bf16de0c70dd5529$export$da400225cd509f48","toggleButton","document","getElementById","filteredTable","addEventListener","classList","toggle","filteredAreShown","contains","innerText","localStorage","setItem","toString","scrollIntoView","event","fallbackToDefaultActions","detail","render","streamElement","getItem","remove","$f4e3c085340bbf20$var$eventSource","URLSearchParams","window","location","search","get","$f4e3c085340bbf20$var$fallback","constructor","active","connect","conn","timerId","setTimeout","reload","lastRefresh","Date","parse","querySelector","dateTime","now","console","log","disconnect","clearTimeout","reconnect","$f4e3c085340bbf20$var$conn","protocol","dashboard","pathname","wsUrl","host","socketUrl","socket","a","__esModule","default","ev","error","message","connectStreamSource","disconnectStreamSource","close","sseUrl","EventSource","csEl","checked"],"version":3,"file":"index.min.js.map"}